{"version":3,"sources":["MovieCard.js","App.js","serviceWorker.js","index.js","tiff.svg"],"names":["MovieCard","_this","this","react_default","a","createElement","dist","flipOnHover","flipOnClick","flipDirection","ref","r","flippy","style","width","height","props","img","title","overview","tagline","genres","runtime","React","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","fetchData","fetch","then","res","json","result","console","log","results","movie","movieRows","forEach","testUrl","concat","id","poster_src","poster_path","testCard","src_MovieCard","src","alt","push","setState","isLoaded","moviePoster","movieInfo","error","testingStuff","state","className","logo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.7b113e2b.chunk.js","sourcesContent":["import React from 'react';\r\nimport Flippy, { FrontSide, BackSide } from 'react-flippy';\r\n\r\nclass MovieCard extends React.Component {\r\n  render() {\r\n    return (\r\n    <Flippy\r\n      flipOnHover={false} // default false\r\n      flipOnClick={true} // default false\r\n      flipDirection=\"horizontal\" // horizontal or vertical\r\n      ref={(r) => this.flippy = r} // to use toggle method like this.flippy.toggle()\r\n      // if you pass isFlipped prop component will be controlled component.\r\n      // and other props, which will go to div\r\n      style={{ width: '440px', height: '700px' }} /// these are optional style, it is not necessary\r\n    >\r\n      <FrontSide\r\n        /*style={{\r\n          backgroundColor: '#41669d',\r\n        }}*/\r\n      >\r\n        {this.props.img}\r\n        <h3>{this.props.title}</h3>\r\n      </FrontSide>\r\n      <BackSide\r\n        /*style={{ backgroundColor: '#175852'}}*/>\r\n        {this.props.overview}<br></br>\r\n        {this.props.tagline}<br></br>\r\n        {this.props.genres}<br></br>\r\n        {this.props.runtime}<br></br>\r\n\r\n      </BackSide>\r\n    </Flippy>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MovieCard;","import React, { Component } from 'react';\r\nimport logo from './tiff.svg';\r\nimport './App.css';\r\nimport MovieCard from './MovieCard.js'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.testingStuff = []\r\n    this.movieInfo = {\r\n      title: [],\r\n      poster_path: []\r\n    }\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n    };\r\n\r\n    this.moviePoster = []\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n\r\n  fetchData = () => {\r\n    const discoverUrl = \"https://api.themoviedb.org/3/discover/movie?api_key=041ff7fe3df8f5abf78dd2b4cd34912a&language=en-US&sort_by=release_date.desc&include_adult=false&include_video=false&page=1&primary_release_year=2019&vote_count.gte=10\";\r\n    fetch(discoverUrl)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          console.log(result.results);\r\n          const movie = result.results;\r\n          var movieRows = [];\r\n          movie.forEach(movie => {\r\n            const testUrl = `https://api.themoviedb.org/3/movie/${movie.id}?api_key=041ff7fe3df8f5abf78dd2b4cd34912a&language=en-US`;\r\n            fetch(testUrl)\r\n            .then(res => res.json()\r\n            .then(\r\n              (movie) => {\r\n                //console.log(result.overview);\r\n                movie.poster_src = \"https://image.tmdb.org/t/p/w400\" + movie.poster_path;\r\n                const testCard = <MovieCard \r\n                  img={<img src={movie.poster_src} alt={movie.title}></img>} \r\n                  title={<p>{movie.title}</p>}\r\n                  overview={<p>{movie.overview}</p>}\r\n                  tagline={<p>{movie.tagline}</p>}\r\n                  runtime={<p>{movie.runtime}</p>}\r\n                ></MovieCard>\r\n                movieRows.push(testCard);\r\n                this.setState({\r\n                  isLoaded: true,\r\n                });\r\n              }\r\n            ));\r\n          });\r\n          this.moviePoster = movieRows;\r\n          console.log(this.movieInfo);\r\n          /*const test = <CardExample></CardExample>\r\n          this.testingStuff = test;*/\r\n          this.setState({\r\n            isLoaded: true,\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n\r\n  }\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <nav>\r\n          <div className=\"titleBar\">\r\n            <img height=\"50vmin\" src={logo} alt=\"\"></img>\r\n          </div>         \r\n          <ul>\r\n            <li>Festivals</li>\r\n            <li>Festivals</li>\r\n            <li>Festivals</li>\r\n            <li>Festivals</li>\r\n            <li>Festivals</li>\r\n            <li>Festivals</li>\r\n          </ul>\r\n        </nav>\r\n        <div className=\"title\">\r\n            <h1>Latest Release From 2019!</h1>\r\n        </div>\r\n        <div className=\"moviePoster\">\r\n          {this.moviePoster}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/tiff.0479919c.svg\";"],"sourceRoot":""}
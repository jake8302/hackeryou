{"version":3,"sources":["MovieCard.js","App.js","serviceWorker.js","index.js","tiff.svg"],"names":["MovieCard","_this","this","react_default","a","createElement","dist","flipOnHover","flipOnClick","flipDirection","ref","r","flippy","style","width","height","src","props","img","alt","title","className","releaseDate","overview","tagline","genres","runtime","React","Component","API_KEY","process","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","fetchData","discoverUrl","concat","fetch","then","res","json","result","results","forEach","movie","movieDetailsUrl","id","poster_src","poster_path","genresArry","push","name","movieCard","src_MovieCard_0","key","release_date","join","setState","isLoaded","movieCards","toConsumableArray","state","error","sort","b","logo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.2cc3cdbc.chunk.js","sourcesContent":["import React from 'react';\r\nimport Flippy, { FrontSide, BackSide } from 'react-flippy';\r\nimport './MovieCard.css'\r\n\r\nclass MovieCard extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n    <Flippy\r\n      flipOnHover={false}\r\n      flipOnClick={true}\r\n      flipDirection=\"horizontal\"\r\n      ref={(r) => this.flippy = r}\r\n      style={{ width: '430px', height: '750px' }}\r\n    >\r\n      <FrontSide\r\n      >\r\n        <img src={this.props.img} alt={this.props.title}></img>\r\n       <div className=\"movieCardDetails\">\r\n        <h3>{this.props.title}</h3>\r\n        <h4>Release Date: {this.props.releaseDate}</h4>\r\n       </div>\r\n\r\n      </FrontSide>\r\n      <BackSide>\r\n        <div className=\"movieCardDetails\">\r\n          {<p><b>Overview: </b>{this.props.overview || <i>Not Available</i>}</p>}\r\n          {<p><b>Tageline: </b>{this.props.tagline || <i>Not Available</i>}</p>}\r\n          {<p><b>Genres: </b>{this.props.genres || <i>Not Available</i>}</p>}\r\n          {<p><b>Runtime(minutes): </b>{this.props.runtime || <i>Not Available</i>}</p>}\r\n        </div>\r\n      </BackSide>\r\n    </Flippy>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MovieCard;","import React, { Component } from 'react';\r\nimport logo from './tiff.svg';\r\nimport './App.css';\r\nimport MovieCard from './MovieCard.js'\r\n\r\nconst API_KEY = process.env.REACT_APP_MOVIE_DB_API_KEY;\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      movieCards: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n\r\n  fetchData = () => {\r\n    const discoverUrl = `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=release_date.desc&include_adult=false&include_video=false&page=1&primary_release_year=2019&vote_count.gte=10`;\r\n    fetch(discoverUrl)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          const movies = result.results;\r\n          movies.forEach(movie => {\r\n            const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${movie.id}?api_key=${API_KEY}&language=en-US`;\r\n            fetch(movieDetailsUrl)\r\n            .then(res => res.json()\r\n            .then(\r\n              (movie) => {\r\n                movie.poster_src = \"https://image.tmdb.org/t/p/w400\" + movie.poster_path;\r\n                const genresArry = [];\r\n                movie.genres.forEach(genres=>{\r\n                  genresArry.push(genres.name);\r\n                })\r\n                const movieCard = <MovieCard key={movie.id} \r\n                  releaseDate = {movie.release_date}\r\n                  img={movie.poster_src} \r\n                  title={movie.title}\r\n                  overview={movie.overview}\r\n                  tagline={movie.tagline}\r\n                  genres={genresArry.join(', ')}\r\n                  runtime={movie.runtime}\r\n                ></MovieCard>\r\n                this.setState({\r\n                  isLoaded: true,\r\n                  movieCards:[...this.state.movieCards, movieCard]\r\n                });\r\n              }\r\n            ));\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n  }\r\n\r\n  render() {\r\n    this.state.movieCards.sort(function compare(a,b) {\r\n      if (a.props.releaseDate < b.props.releaseDate)\r\n        return 1;\r\n      if (a.props.releaseDate > b.props.releaseDate)\r\n        return -1;\r\n      return 0;\r\n    });\r\n    return (\r\n      <div className=\"App\">\r\n        <nav>\r\n          <div className=\"titleBar\">\r\n            <img height=\"50vmin\" src={logo} alt=\"\"></img>\r\n          </div>\r\n        </nav>\r\n        <div className=\"title\">\r\n            <h1>Latest Release From 2019!</h1>\r\n        </div>\r\n        <div className=\"moviePoster\">\r\n          {this.state.movieCards}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/tiff.0479919c.svg\";"],"sourceRoot":""}